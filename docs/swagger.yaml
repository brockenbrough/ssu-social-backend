# See https://github.com/sspangsberg/mongo_mongoose_nodejs_api/blob/main/swagger.yaml for 
# a more complete example of a Swagger file.
# Be very careful with indentation in this file. It is very sensitive to indentation errors.
# You may want to try an online YAML validator if you get errors when running swagger-ui-express.
# See https://www.youtube.com/watch?v=O0R-L8PbP-4 for a video on this topic.
# See https://swagger.io/docs/specification/2-0/basic-structure/ for a description of the Swagger file structure.

openapi: 3.0.0
info:
  title: SSU SOCIAL API
  description: MongoDB ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  - url: http://localhost:8095/
    description: Localhost development server 
  - url: https://ssu-social-app-api.onrender.com/
    description: Render remote server
components:
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: auth-token

  schemas:
    Comment:
      type: object
      properties:
        username:
          type: string
        replies:
          type: array
          items:
            type: string
        date:
          type: string

    Contributor:
      type: object
      properties:
        name:
          type: string
        position:
          type: string
        level:
          type: string
          
    Follower:
      type: object
      properties:
        userId:
          type: string
        followers:
          type: array
          items:
            type: string

    Following:
      type: object
      properties:
        userId:
          type: string
        following:
          type: array
          items:
            type: string

    Like:
      type: object
      properties:
        userId:
          type: string
        postId:
          type: string
        date:
          type: string

    Post:
      type: object
      properties:
        username:
          type: string
        content:
          type: string

    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        date:
          type: string
       
    View:
      type: object
      properties:
        userId:
          type: string
        postId:
          type: string


    

paths:
#
# User
#
  /user/getAll:
    get:
      summary: Retrieves all users.
      tags:
        - User
      description: Retrieves a list of users as JSON objects.
      responses:
        200:
          description: A list of user JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /user/getUserById/{id}:
    get:
      summary: Get specific user.
      description: Retrieves a user by collection entry id.
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: The User in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /user/login:
    post:
      summary: Login a user.
      tags:
        - User
      description: Login a User in order to get JWT token (auth-token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string

  /user/signup:
    post:
      summary: Create a user.
      tags:
        - User
      description: Create a User.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      
      responses:
        200:
          description: Returns the created user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"


  /user/login:
    post:
      summary: Login a user.
      tags:
        - User
      description: Login a User in order to get JWT token (auth-token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string

  /user/editUser:
    post:
      summary: Edit a user.
      tags:
        - User
      description: Edit an existing user identified by MongoDB id.  Or does it??? Seems broken.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      
      responses:
        200:
          description: Returns the authorization access token in thr header.
          content:
              application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string

  /user/deleteAll:
    post:
      summary: Deletes all users.
      description: Deletes all users.
      tags:
        - User
      responses:
        200:
          description: Number of users deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  deletedCount:
                    type: integer
                   

#
# Post
#
  /posts/getAllPosts:
    get:
      summary: Retrieves all posts.
      description: Retrieves a list of posts as JSON objects.
      tags:
        - Post
      responses:
        200:
          description: A list of posts JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"

  /posts/getPostById/{postId}:
    get:
      summary: Get post with given id.
      description: Retrieves the post as a JSON objects.
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: The MongoDB id of the post.
          schema:
            type: string
      responses:
        200:
          description: The post.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"

  /posts/getAllByUsername/{username}:
    get:
      summary: Get all posts made by a given user.
      description: Retrieves a list of posts as JSON objects.
      tags:
        - Post
      parameters:
        - in: path
          name: username
          required: true
          description: The name of the user.
          schema:
            type: string
      responses:
        200:
          description: A list of posts as JSON objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"


  /posts/updatePost/{postId}:
    put:
      summary: Get post with given id.
      tags:
        - Post
      description: Updates the post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                content:
                  type: string
      parameters:
        - in: path
          name: postId
          required: true
          description: The MongoDB id of the post.
          schema:
            type: string
      responses:
        200:
          description: Returned on success.

  /posts/deletePost/{postId}:
    delete:
      summary: Deletes the given post.
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: The MongoDB id of the post.
          schema:
            type: string
      description: Deletes the post.
      responses:
        200:
          description: Returned on success.

#
# Feed
#
  /feed:
    get:
      summary: Retrieves a list of posts that is appropriate for an anonymous user.
      description: Retrieves a list of posts as JSON objects. The posts are sorted to present posts with higher likes and views first.URI parameters given the position of the first post in the sort list and the number of subsequent posts to return.
      tags:
        - Feed
      responses:
        200:
          description: A list of posts JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"

  /feed/{startingPosition}/{pageSize}:                
    get:
      summary: Retrieves a portion of a list of posts that is appropriate for an anonymous user.
      description: Retrieves a list of posts as JSON objects.  The posts are sorted to present posts with higher likes and views first.
      tags:
        - Feed
      parameters:
        - in: path
          name: startingPosition
          required: true
          description: zero-based index of the first post to return.
          schema:
            type: integer
        - in: path
          name: pageSize
          required: true
          description: total number of posts returned.
          schema:
            type: integer
      responses:
        200:
          description: A list of posts JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"


  /feed/{username}:                
    get:
      summary: Retrieves a list of posts that is appropriate for a given user.
      description: Retrieves a list of posts as JSON objects.  The posts are sorted to present posts with higher likes and views first.
      tags:
        - Feed
      parameters:
        - in: path
          name: username
          required: true
          description: username.
          schema:
            type: string
      responses:
        200:
          description: A list of posts JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
#
# Project Notes
#
  /project_notes/contributor:
    get:
      summary: Retrieves all contributors.
      tags:
        - Project Notes
      description: Retrieves all contributors as JSON objects.
      responses:
        200:
          description: A list of contributors JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contributor"

  /project_notes/contributor/{id}:
    get:
      summary: Get specific user.
      description: Retrieves a user by collection entry id.
      tags:
        - Project Notes
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: The Contributor in the format of a JSON object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contributor"

  /project_notes/contributor/add:
    post:
      summary: Create a contributor.
      tags:
        - Project Notes
      description: Create a contributor.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                position:
                  type: string
                level:
                  type: string
      responses:
        200:
          description: Returns the created contributor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contributor"

  /project_notes/contributor/delete/{id}:
    delete:
      summary: Deletes the contributor.
      tags:
        - Project Notes
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      description: Deletes the contributor with the given MongoDB id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                position:
                  type: string
                level:
                  type: string
      responses:
        200:
          description: Returns a message about the success of the operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string

  /project_notes/contributor/{id}:
    get:
      summary: Get specific user.
      description: Retrieves a user by collection entry id.
      tags:
        - Project Notes
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: The Contributor in the format of a JSON object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contributor"

  /project_notes/contributor/add:
    post:
      summary: Create a contributor.
      tags:
        - Project Notes
      description: Create a contributor.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                position:
                  type: string
                level:
                  type: string
      responses:
        200:
          description: Returns the created contributor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contributor"

  /project_notes/contributor/update/{id}:
    put:
      summary: Updates the contributor.
      tags:
        - Project Notes
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      description: Updates the contributor with the given MongoDB id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                position:
                  type: string
                level:
                  type: string
      responses:
        200:
          description: Returns the created contributor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contributor"

#
# Likes
#
  /like-list:
    get:
      summary: Retrieves all likes.
      tags:
        - Likes
      description: Retrieves all likes as JSON objects.
      responses:
        200:
          description: A list of likes JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Like"

  /user-likes/{id}:
    get:
      summary: Retrieves all Likes that a given user made.
      tags:
        - Likes
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      description: Retrieves all likes as JSON objects for user with given MongoDB id.
      responses:
        200:
          description: A list of likes JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Like"

  /count/likes-by-user/{id}:
    get:
      summary: Counts the number of posts a user liked.
      tags:
        - Likes
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      description: Counts all likes made by a user with given MongoDB id.
      responses:
        200:
          description: The number of likes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  numberLiked:
                    type: integer

  /count/likes-for-post/{id}:
    get:
      summary: Counts all likes for given post.
      tags:
        - Likes
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id for post
          schema:
            type: string
      description: Counts all likes for the given post.
      responses:
        200:
          description: Number of likes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  numberLiked:
                    type: integer

  /likes/like:
    post:
      summary: Create a like of a post.
      tags:
        - Likes
      description: Create a liking of a post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                postId:
                  type: string
      responses:
        200:
          description: Returns the created like.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"

  /count/likes-by-user/{id}:
    get:
      summary: Counts the number of posts a user liked.
      tags:
        - Likes
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      description: Counts all likes made by a user with given MongoDB id.
      responses:
        200:
          description: The number of likes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  numberLiked:
                    type: integer

  /likes/unLike:
    delete:
      summary: Deletes the given like.
      tags:
        - Likes
      description: Deletes the contributor with the given MongoDB user id, post id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                postId:
                  type: string
      responses:
        200:
          description: Returns the number of likes deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  deletedCount:
                    type: integer

#
# Views
#
  /views/view:
    post:
      summary: Create a view of a post.
      tags:
        - Views
      description: Create a viewing of a post.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                postId:
                  type: string
      responses:
        200:
          description: Returns the created view.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/View"

  /views:
    get:
      summary: Returns the number of views for a given post.  This is a horrible API. The post must be identfied in the body rather than as a paramter in the URI and the output result is misnamed (refers to likes rather than views). And I don't think it works.
      tags:
        - Views
      description: Counts the views for the given post identfied by MongoDB ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses:
        200:
          description: Number of views.
          content:
            application/json:
              schema:
                type: object
                properties:
                  numberLiked:
                    type: integer
